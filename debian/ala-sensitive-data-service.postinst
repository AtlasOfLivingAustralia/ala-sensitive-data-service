#!/bin/bash

#######################################################
#
# Add here the commands to be excuted after the package
# has been installed
#

#Example: create some symbolic links
#
#chown -R ${user}:${group} /opt/${appName}-${appVersion}
#ln -s /opt/${appName}-${appVersion} /opt/${appName}

set -e

. /usr/share/debconf/confmodule

#DEBHELPER#

case "$1" in
    configure)
        #
        # Duplicate code from ala-namematching-service. Remove when both services use the same nameindex
        #

        # We read the URL of the nameindex asked to the user in a interactive mode
        db_get ala-sensitive-data-service/source
        URL=$RET
        db_get ala-sensitive-data-service/sha1
        SHA1=$RET

        DEST=/data/lucene/namematching-sd.tgz
        FINAL_DEST=/data/lucene/namematching-sd/

        # To prevent /data/lucene installed nameindexes to fill our disk:
        #
        # 1) we try to not download the same nameindex again and again (this is why we use curl -C)
        # 2) we rsync the tar over /data/lucene/namematching-sd overwritting the previous nameindex
        #

        echo "Downloading nameindex $URL ..."

        # Try to resume previous download (continue if fails)
        set +e
        curl -sLC - -o "$DEST" -f "$URL"
        set -e

        SHA1_DOWNLOADED=$(sha1sum $DEST | awk '{ print $1 }')

        # Downloaded file sha1 does not match provided sha1, so retry full download
        if [[ "$SHA1" != "$SHA1_DOWNLOADED" ]]; then
            echo "SHA1 does not match ($SHA1 vs $SHA1_DOWNLOADED), trying to download again $URL ..."
            curl -sL -o "$DEST" "$URL"
        fi

        # Some tars are crated with ./somerootdir/vernacular etc and others with ./vernacular directly
        ROOTDIR1=$(tar tf $DEST | head -1 | cut -d "/" -f 1)
        ROOTDIR2=$(tar tf $DEST | head -1 | cut -d "/" -f 2)

        echo "Untar nameindex source ..."
        tar zxf $DEST -C /tmp/ --no-same-owner

        if [[ -n "$ROOTDIR1" && ${#ROOTDIR1} -gt 1 ]]; then
            echo "Provided nameindex tar uses $ROOTDIR1 as root directory"
            rsync -a --delete "/tmp/$ROOTDIR1/" "$FINAL_DEST";
        else
            if [[ -n "$ROOTDIR2" && ${#ROOTDIR2} -gt 1 ]]; then
                echo "Provided nameindex tar uses $ROOTDIR2 as root directory"
                rsync -a --delete "/tmp/$ROOTDIR2/" "$FINAL_DEST";
            else
                echo "ERROR: Incorrect nameindex tar"
            fi
        fi
        chown -R sds-data:sds-data "$FINAL_DEST"

        #
        # End of duplicate code from namematching

        # We read the URL of the sds service asked to the user in a interactive mode
        db_get ala-sensitive-data-service/sds-url
        SDS_URL=$RET
        db_get ala-sensitive-data-service/layers-url
        LAYERS_URL=$RET
        db_get ala-sensitive-data-service/spatial-url
        SPATIAL_URL=$RET

        CONF=/data/ala-sensitive-data-service/config/config.yml
        SDS_CONF=/data/sds/config/sds-config.properties 

        # We configure the values read in the config
        SPATIAL_URL_ESCAPED=$(printf '%s\n' "$SPATIAL_URL/ws" | sed -e 's/[\/&]/\\&/g')
        sed -i "s/https\:\/\/spatial\.ala\.org\.au.*/$SPATIAL_URL_ESCAPED/" "$CONF"

        # We set also the nameindex destination to avoid collision with nameindex package and ansible nameindex role

        # Escape the FINAL_DEST
        # https://stackoverflow.com/a/2705678/642847
        ESC_FINAL_DEST=$(printf '%s\n' "$FINAL_DEST" | sed -e 's/[\/&]/\\&/g')
        sed -i "s/\/data\/lucene\/namematching.*/$ESC_FINAL_DEST/" "$CONF"
        sed -i "s/\/data\/lucene\/namematching.*/$ESC_FINAL_DEST/" "$SDS_CONF"

        echo "Downloading SDS configs..."
        for DEST in sensitive-species-data.xml sensitivity-zones.xml sensitivity-categories.xml
        do
           curl -sL -o "/data/sds/$DEST" "$SDS_URL/$DEST"
        done
        curl -sf -o /data/sds/layers.json -L "$SDS_URL/ws/layers"

        echo "Downloading SDS layers..."
        curl -sf -o /data/biocache/layers/sds-layers.tgz -L $LAYERS_URL

        echo "Extracting SDS layers..."
        # SDS def ALA tgz is created with a MacOS tar
        # https://github.com/yarnpkg/yarn/issues/770
        tar --warning=no-unknown-keyword -zxf /data/biocache/layers/sds-layers.tgz -C /data/biocache/layers/

        chown -R sds-data:sds-data /opt/atlas/ala-sensitive-data-service

        # Restart the service with the new config and layers

        if [ -d /run/systemd/system ]; then
            deb-systemd-invoke restart ala-sensitive-data-service.service || true
        fi
    ;;
esac

echo ala-sensitive-data-service installed
